import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';
import '../models/offline_models.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
class OfflineService extends ChangeNotifier {
  static const String _settingsKey = 'offline_settings';

  Database? _database;
  // SharedPreferences? _prefs; // Unused field removed

  bool _isInitialized = false;
  bool _isOfflineMode = false;
  OfflineSettings _settings = const OfflineSettings();
  final List<OfflineOperation> _pendingOperations = [];

  Timer? _syncTimer;
  StreamController<OfflineEvent>? _eventController;

  // –ì–µ—Ç—Ç–µ—Ä—ã
  bool get isInitialized => _isInitialized;
  bool get isOfflineMode => _isOfflineMode;
  OfflineSettings get settings => _settings;
  List<OfflineOperation> get pendingOperations => List.from(_pendingOperations);
  int get pendingOperationsCount => _pendingOperations.length;
  Stream<OfflineEvent>? get eventStream => _eventController?.stream;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å–∞
  Future<bool> initialize() async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SharedPreferences
      // _prefs = await SharedPreferences.getInstance(); // Unused

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞
      await _initializeDatabase();

      // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      await _loadSettings();

      // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      await _loadPendingOperations();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
      _eventController = StreamController<OfflineEvent>.broadcast();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      _setupAutoSync();

      _isInitialized = true;

      if (kDebugMode) {
        print('‚úÖ OfflineService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      notifyListeners();
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OfflineService: $e');
      }
      return false;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  Future<void> _createTables(Database db, int version) async {
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—ç—à–∞
    await db.execute('''
      CREATE TABLE cache_entries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        key TEXT UNIQUE NOT NULL,
        data TEXT NOT NULL,
        expiry INTEGER,
        tags TEXT,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL
      )
    ''');

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await db.execute('''
      CREATE TABLE offline_operations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        operation_id TEXT UNIQUE NOT NULL,
        type TEXT NOT NULL,
        method TEXT NOT NULL,
        endpoint TEXT NOT NULL,
        data TEXT,
        headers TEXT,
        priority INTEGER DEFAULT 0,
        retry_count INTEGER DEFAULT 0,
        max_retries INTEGER DEFAULT 3,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL
      )
    ''');

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.execute('CREATE INDEX idx_cache_key ON cache_entries(key)');
    await db.execute('CREATE INDEX idx_cache_expiry ON cache_entries(expiry)');
    await db.execute('CREATE INDEX idx_operations_priority ON offline_operations(priority DESC)');
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _initializeDatabase() async {
    final documentsDirectory = await getApplicationDocumentsDirectory();
    final dbPath = '${documentsDirectory.path}/magento_offline.db';

    _database = await openDatabase(
      dbPath,
      version: 1,
      onCreate: _createTables,
      onUpgrade: _upgradeDatabase,
    );
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _upgradeDatabase(
      Database db, int oldVersion, int newVersion) async {
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString(_settingsKey);

      if (settingsJson != null) {
        final settingsMap = jsonDecode(settingsJson) as Map<String, dynamic>;
        _settings = OfflineSettings.fromJson(settingsMap);
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞: $e');
      }
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_settingsKey, jsonEncode(_settings.toJson()));
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<void> _loadPendingOperations() async {
    try {
      if (_database != null) {
        final results = await _database!.query(
          'offline_operations',
          where: 'status = ?',
          whereArgs: ['pending'],
          orderBy: 'priority DESC, created_at ASC',
        );

        _pendingOperations.clear();
        for (final row in results) {
          _pendingOperations.add(OfflineOperation.fromDatabaseRow(row));
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: $e');
      }
    }
  }

  /// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  Future<void> cacheData<T>({
    required String key,
    required T data,
    Duration? ttl,
    List<String>? tags,
  }) async {
    if (!_isInitialized) return;

    try {
      final entry = CacheEntry(
        key: key,
        data: jsonEncode(data),
        expiry: ttl != null ? DateTime.now().add(ttl) : null,
        tags: tags ?? [],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
      if (_database != null) {
        await _database!.insert(
          'cache_entries',
          entry.toDatabaseRow(),
          conflictAlgorithm: ConflictAlgorithm.replace,
        );
      }

      _emitEvent(OfflineEvent.dataCached(key, data));

      if (kDebugMode) {
        print('üì¶ –î–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω: $key');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e');
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
  Future<T?> getCachedData<T>(String key,
      {T Function(Map<String, dynamic>)? fromJson}) async {
    if (!_isInitialized) return null;

    try {
      CacheEntry? entry;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
      if (_database != null) {
        final results = await _database!.query(
          'cache_entries',
          where: 'key = ?',
          whereArgs: [key],
          limit: 1,
        );

        if (results.isNotEmpty) {
          entry = CacheEntry.fromDatabaseRow(results.first);
        }
      }

      if (entry == null) return null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (entry.expiry != null && DateTime.now().isAfter(entry.expiry!)) {
        await removeCachedData(key);
        return null;
      }

      // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      final dataMap = jsonDecode(entry.data) as Map<String, dynamic>;

      if (fromJson != null) {
        return fromJson(dataMap);
      } else {
        return dataMap as T;
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      }
      return null;
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
  Future<void> removeCachedData(String key) async {
    if (!_isInitialized) return;

    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ SQLite

      if (_database != null) {
        await _database!.delete(
          'cache_entries',
          where: 'key = ?',
          whereArgs: [key],
        );
      }

      _emitEvent(OfflineEvent.dataRemoved(key));
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
      }
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  Future<void> clearCache({List<String>? tags}) async {
    if (!_isInitialized) return;

    try {
      if (tags == null) {
        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        if (_database != null) {
          await _database!.delete('cache_entries');
        }
      } else {
        // –û—á–∏—â–∞–µ–º –ø–æ —Ç–µ–≥–∞–º
        if (_database != null) {
          for (final tag in tags) {
            await _database!.delete(
              'cache_entries',
              where: 'tags LIKE ?',
              whereArgs: ['%$tag%'],
            );
          }
        }
      }

      _emitEvent(OfflineEvent.cacheCleared(tags));

      if (kDebugMode) {
        print('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: $e');
      }
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
  Future<void> queueOperation(OfflineOperation operation) async {
    if (!_isInitialized) return;

    try {
      _pendingOperations.add(operation);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (_database != null) {
        await _database!.insert(
          'offline_operations',
          operation.toDatabaseRow(),
          conflictAlgorithm: ConflictAlgorithm.replace,
        );
      }

      _emitEvent(OfflineEvent.operationQueued(operation));

      if (kDebugMode) {
        print('üì§ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${operation.type}');
      }

      notifyListeners();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: $e');
      }
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<void> processPendingOperations() async {
    if (!_isInitialized || _pendingOperations.isEmpty) return;

    final operationsToProcess = List<OfflineOperation>.from(_pendingOperations);

    for (final operation in operationsToProcess) {
      try {
        await _processOperation(operation);
      } catch (e) {
        if (kDebugMode) {
          print('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationId}: $e');
        }
      }
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<void> _processOperation(OfflineOperation operation) async {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é

      _pendingOperations
          .removeWhere((op) => op.operationId == operation.operationId);

      if (_database != null) {
        await _database!.update(
          'offline_operations',
          {
            'status': 'completed',
            'updated_at': DateTime.now().millisecondsSinceEpoch
          },
          where: 'operation_id = ?',
          whereArgs: [operation.operationId],
        );
      }

      _emitEvent(OfflineEvent.operationCompleted(operation));

      if (kDebugMode) {
        print('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${operation.operationId}');
      }
    } catch (e) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤
      final updatedOperation = operation.copyWith(
        retryCount: operation.retryCount + 1,
        status: operation.retryCount >= operation.maxRetries
            ? OfflineOperationStatus.failed
            : OfflineOperationStatus.pending,
      );

      if (_database != null) {
        await _database!.update(
          'offline_operations',
          updatedOperation.toDatabaseRow(),
          where: 'operation_id = ?',
          whereArgs: [operation.operationId],
        );
      }

      if (updatedOperation.status == OfflineOperationStatus.failed) {
        _pendingOperations
            .removeWhere((op) => op.operationId == operation.operationId);
        _emitEvent(OfflineEvent.operationFailed(operation, e.toString()));
      }

      rethrow;
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  void _setupAutoSync() {
    _syncTimer?.cancel();

    if (_settings.autoSyncEnabled && _settings.autoSyncInterval != null) {
      _syncTimer = Timer.periodic(_settings.autoSyncInterval!, (_) async {
        if (!_isOfflineMode) {
          await processPendingOperations();
        }
      });
    }
  }

  /// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  Future<void> setOfflineMode(bool enabled) async {
    _isOfflineMode = enabled;

    _settings = _settings.copyWith(forceOfflineMode: enabled);
    await _saveSettings();

    _emitEvent(OfflineEvent.offlineModeChanged(enabled));

    if (kDebugMode) {
      print(enabled ? 'üìµ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω' : 'üåê –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω');
    }

    notifyListeners();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<void> updateSettings(OfflineSettings newSettings) async {
    _settings = newSettings;
    await _saveSettings();
    _setupAutoSync();
    notifyListeners();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  Future<Map<String, dynamic>> getCacheStats() async {
    if (!_isInitialized || _database == null) {
      return {'error': 'Service not initialized'};
    }

    try {
      final totalEntries = await _database!
          .rawQuery('SELECT COUNT(*) as count FROM cache_entries');
      final expiredEntries = await _database!.rawQuery(
        'SELECT COUNT(*) as count FROM cache_entries WHERE expiry < ?',
        [DateTime.now().millisecondsSinceEpoch],
      );

      return {
        'totalEntries': totalEntries.first['count'],
        'expiredEntries': expiredEntries.first['count'],
        'pendingOperations': _pendingOperations.length,
        'cacheSize': totalEntries.first['count'],
      };
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞
  Future<void> cleanupExpiredCache() async {
    if (!_isInitialized || _database == null) return;

    try {
      final deletedCount = await _database!.delete(
        'cache_entries',
        where: 'expiry < ?',
        whereArgs: [DateTime.now().millisecondsSinceEpoch],
      );

      if (kDebugMode && deletedCount > 0) {
        print('üßπ –£–¥–∞–ª–µ–Ω–æ $deletedCount –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫—ç—à–∞: $e');
      }
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
  Map<String, dynamic> get status => {
        'isInitialized': _isInitialized,
        'isOfflineMode': _isOfflineMode,
        'pendingOperationsCount': _pendingOperations.length,
        'cacheSize': 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î
        'autoSyncEnabled': _settings.autoSyncEnabled,
        'autoSyncInterval': _settings.autoSyncInterval?.inMinutes,
      };

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
  void _emitEvent(OfflineEvent event) {
    _eventController?.add(event);
  }

  @override
  void dispose() {
    _syncTimer?.cancel();
    _eventController?.close();
    _database?.close();
    super.dispose();
  }
}
