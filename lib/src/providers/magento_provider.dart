import 'package:flutter/foundation.dart';
import '../services/auth_service.dart';
import '../services/network_service.dart';
import '../services/offline_service.dart';
import '../services/localization_service.dart';

/// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Magento
class MagentoProvider extends ChangeNotifier {
  static final MagentoProvider _instance = MagentoProvider._internal();
  factory MagentoProvider() => _instance;
  MagentoProvider._internal();

  // –°–µ—Ä–≤–∏—Å—ã
  late final AuthService _authService;
  late final NetworkService _networkService;
  late final OfflineService _offlineService;
  late final LocalizationService _localizationService;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;
  bool _isInitializing = false;
  String? _error;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool get isInitialized => _isInitialized;
  bool get isInitializing => _isInitializing;
  String? get error => _error;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
  AuthService get auth => _authService;
  NetworkService get network => _networkService;
  OfflineService get offline => _offlineService;
  LocalizationService get localization => _localizationService;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<bool> initialize({
    required String baseUrl,
    Map<String, String>? headers,
    int? connectionTimeout,
    int? receiveTimeout,
    String? adminToken,
    List<String>? supportedLanguages,
  }) async {
    if (_isInitialized || _isInitializing) return _isInitialized;

    _isInitializing = true;
    _error = null;
    notifyListeners();

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
      _authService = AuthService();
      _networkService = NetworkService();
      _offlineService = OfflineService();
      _localizationService = LocalizationService();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–≤—ã–º
      await _networkService.initialize(
        baseUrl: baseUrl,
        headers: headers,
        connectionTimeout: connectionTimeout,
        receiveTimeout: receiveTimeout,
        adminToken: adminToken,
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      await Future.wait([
        _authService.initialize(),
        _offlineService.initialize(),
        _localizationService.initialize(supportedLanguages ?? []),
      ]);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      _setupListeners();

      _isInitialized = true;
      _isInitializing = false;

      if (kDebugMode) {
        print('‚úÖ MagentoProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      }

      notifyListeners();
      return true;
    } catch (e) {
      _error = e.toString();
      _isInitializing = false;
      _isInitialized = false;

      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MagentoProvider: $e');
      }

      notifyListeners();
      return false;
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
  void _setupListeners() {
    _authService.addListener(() {
      notifyListeners();
    });

    _networkService.addListener(() {
      notifyListeners();
    });

    _offlineService.addListener(() {
      notifyListeners();
    });

    _localizationService.addListener(() {
      notifyListeners();
    });
  }

  /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> reset() async {
    try {
      await _authService.logout();
      await _offlineService.clearCache();

      _isInitialized = false;
      _isInitializing = false;
      _error = null;

      notifyListeners();

      if (kDebugMode) {
        print('üîÑ MagentoProvider —Å–±—Ä–æ—à–µ–Ω');
      }
    } catch (e) {
      _error = e.toString();
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ MagentoProvider: $e');
      }
      notifyListeners();
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
  bool get isReady => _isInitialized && !_isInitializing && _error == null;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  Map<String, dynamic> get status => {
        'isInitialized': _isInitialized,
        'isInitializing': _isInitializing,
        'isReady': isReady,
        'error': _error,
        'authStatus': _authService.status,
        'networkStatus': _networkService.status,
        'offlineStatus': _offlineService.status,
        'localizationStatus': _localizationService.status,
      };

  @override
  void dispose() {
    _authService.removeListener(() {});
    _networkService.removeListener(() {});
    _offlineService.removeListener(() {});
    _localizationService.removeListener(() {});
    super.dispose();
  }
}
